// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package data generated by go-bindata.// sources:
// schema/schema.graphql
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x73\xdb\x38\x92\x7f\xcf\xa7\xe8\xe4\x1e\x2e\xa9\xb2\xe5\xd4\xec\x9b\xaa\xe6\x81\x91\xe8\x89\x6e\x65\xc9\x23\xc9\x3b\x33\x97\x4a\xa9\x20\xb2\x25\xe2\x4c\x02\x1c\x00\x94\xac\x4b\xed\x77\xbf\x6a\xfc\xa1\x40\x99\x52\xb2\xb5\x2f\x57\x5b\xfb\x92\xd8\x20\x80\xfe\x83\xee\x5f\xff\xd0\xf0\xbb\x77\xef\xde\x24\xa0\xf9\x4e\x60\x0e\x1f\x5f\x40\xaa\x1c\x15\xb0\x2c\x93\x2a\xe7\x62\x07\x46\x82\x29\x10\xbe\xd4\x4a\x1a\x99\xc9\x12\x74\x8d\x19\xdf\xf2\x8c\x19\x2e\xc5\xd7\xf7\x85\x31\xb5\x1e\xde\xdd\xed\xb8\x29\x9a\xcd\x20\x93\xd5\xdd\xc7\x97\x47\x25\xff\x07\x33\x73\xf7\xf1\xe5\x36\xac\xbb\xed\xac\xbb\xdb\x94\x72\x73\x57\x31\x6d\x50\xdd\xed\xff\x72\xb7\xff\x4b\xf7\xfb\xa0\xca\xff\xc3\x6a\x72\x5b\xa1\xd6\x6c\x87\xb7\x5b\xa9\x2a\x66\x06\x1f\xde\x90\xc2\xe6\x58\x23\x2c\xad\xce\x73\xab\xef\xb7\x37\x00\x00\x59\xc1\xb8\x98\xe4\x43\x58\x1a\xc5\xc5\xee\xad\x1d\xc4\x97\xac\x60\x62\x87\x49\x9e\x2b\xd4\xba\xfb\xb1\x62\xcf\xa8\xae\x7c\xd1\x1a\xcd\x98\x19\x76\xe9\x5b\x52\xc9\x46\x98\x9e\xaf\xf7\x88\xd7\x16\xdf\x23\x76\x47\xcd\x45\x45\xcc\x15\x45\xcc\x55\x45\xcc\x75\x45\x4c\xaf\x22\x1a\x45\x7e\x41\x93\x2d\xe2\x02\x33\x5e\x73\x14\xa6\x77\x02\xbe\xd4\x5c\xd9\xf3\x5b\xf1\x0a\x97\x98\x49\x91\x9f\x4d\xd1\xac\x3c\xd3\x92\x42\x8f\x99\x46\x45\x7a\xfc\xfd\xcd\x9b\x0b\x61\x59\x4a\xb1\x83\x03\x37\x05\x68\x59\x21\xb0\x3c\xe7\x24\x8e\x95\x50\xa1\x61\x39\x33\x0c\xd8\x46\x36\xc6\xc6\xac\x5b\x73\x28\x78\x56\x00\xd7\x20\xa4\x81\x9a\x29\x03\x72\x6b\x3f\x7f\x7c\x81\xfe\xa0\x1e\x9c\x62\xcc\x46\xd7\x6f\xdc\x14\x0f\x61\xfb\x7f\x47\xda\xbf\x52\xa4\xd1\x30\x1d\x36\xfd\xbf\x2a\x10\x0a\xa6\x8b\x1b\x1f\x32\x19\x13\xb0\x41\x68\x34\xe6\x84\x82\x8d\xe0\x7f\x36\x58\x1e\x81\xe7\x28\x0c\xdf\x1e\x81\x09\x17\x62\x83\xce\x36\xb4\xc5\x65\x01\x0a\x2b\xc6\x05\x01\x2b\xb3\x7e\x0c\xc1\x68\xcf\x0a\x18\xf9\xcf\x8b\x2f\x98\x0b\xd9\x23\x1a\xd8\x20\x0a\xd8\xf2\xb2\xc4\xbc\x2b\x8c\xc6\xd8\xa6\xc4\xd5\xc5\xe3\x09\xb9\x24\x00\x45\x53\x41\x26\x85\x09\x0a\x94\x65\x94\x26\x5b\x8e\x65\xae\x61\x2b\x43\xc6\x6c\x79\x69\x50\x69\x60\x22\xbf\x93\x0a\xb4\x54\x86\x56\x71\x0d\xba\xa9\x6b\xa9\x0c\xe9\x42\x5b\xdb\x7d\x6d\xa2\xdc\xd3\x1e\x3e\x43\xc8\x0d\x71\xaa\xf4\x65\xc8\xab\xc4\xe8\xc9\x87\xde\x34\xe8\x8f\xfe\xce\xe8\xab\x58\xef\x09\xf1\xde\xc8\xee\x0f\xe8\xce\xe8\xeb\xf0\xbd\x14\xb5\x97\x83\xb5\x8d\xd1\xab\xe7\x18\x8e\x8f\x42\xe7\x99\x8b\x9c\xc2\x25\x93\x55\xcd\x14\xd7\x52\x50\x58\x86\x08\xe5\x02\x98\x3f\xb3\xe8\x58\xee\xed\xc0\x5f\x69\xa5\x3b\x96\xf4\xd7\xa7\x64\x6a\x7f\x9a\xcd\x57\xeb\xd3\x6f\xbf\x2c\xd2\x64\x95\x2e\xe2\x9f\xd7\xf3\x45\x34\x61\x9a\x2e\x97\xed\x0f\xa7\x4f\x91\x7e\x39\x57\x98\x91\x95\xa4\x16\x85\x0b\x70\x31\x80\x44\x67\x28\x2c\x93\xa8\x90\x09\x0d\xa5\x3c\xa0\x36\x34\xa5\xe0\xbb\x02\xb5\x19\xc0\x18\xcf\xe6\xf8\x2f\x34\xc9\x4d\x8f\x2c\x5a\x4a\x65\xc6\xad\x24\x67\x54\xb2\x1c\xd9\xff\xc7\xe9\x72\x14\x6b\xb4\x67\x65\x83\xb4\x8b\xf3\x8b\x2d\x1c\x03\x78\x68\x34\x65\x94\x8d\x7d\xcd\x2a\x04\x8b\xf4\x4c\xdb\x01\x9b\x06\x70\x94\x0d\x30\x85\x7e\x1d\x29\xb6\x39\x3a\x1d\x74\xc6\x4a\xa6\xbc\x5f\xff\x46\xfb\x87\x5a\xe5\x65\x48\x0f\x0a\x7a\x00\xa3\x08\x40\xb8\x80\x3f\x1b\x54\x1c\x35\xe9\x23\x45\x79\x04\x85\xa6\x51\x61\x36\x98\x82\x19\xa8\x10\x0d\x64\xa8\x28\x45\x21\x53\x9c\x84\x33\x27\x98\x8b\xba\x31\x21\xcd\xac\xa4\x6f\x3e\x72\xb0\xcc\x87\x51\xfe\x39\xcc\xa1\x60\x19\x46\xc7\xef\x46\xad\x43\x86\xb1\xf6\x71\xb1\xa5\x23\xb3\xda\x90\xc1\x04\x04\xdf\x37\x84\xe0\x44\xc9\x18\x47\xb8\xf0\xf8\xa1\x50\x37\xa5\xd1\xd6\x8f\xce\xd4\x00\x18\x91\x29\x74\x9a\xd7\x0d\x69\xa3\x6a\xd8\x3d\xfa\xb7\xf1\x41\x6f\x4a\x99\x3d\x83\x68\xaa\x0d\x81\xa8\xc8\xfd\x00\x61\x90\x35\x84\xd4\x2b\x99\xa1\x98\x72\x5f\xac\xb7\x09\x61\x2d\xb2\xd6\x4a\x66\xa8\xc9\xba\xcd\x11\x1e\x50\x17\x11\x03\x98\xda\x65\x9f\xec\x2a\xa7\xa8\x13\xd3\x85\xf8\x2e\xe8\x7b\xcd\x46\x0e\x6b\x35\x79\x69\xcb\x77\x8d\xc3\x00\x90\x35\xfd\x67\x81\x15\xf6\x4c\x71\xd9\x68\xd0\x86\x19\x07\xbe\x67\xe2\x97\xf6\x83\x13\xbc\x47\xa5\x9d\x23\x22\xc9\x75\xb3\x59\x36\x9b\x95\xac\x79\xd6\xfd\xa0\x08\x9f\xfe\x77\x2f\x9b\xb3\xba\x58\x23\xaa\xc9\xf8\xac\x9c\x9a\x02\x15\x36\xd5\xc8\x62\xf5\x78\x08\x13\x61\xdc\x97\xf2\x64\xfe\x30\xf6\xc5\xdb\xe0\x8a\x47\x44\xa5\xa3\x05\xa2\xa9\xec\x11\xf6\x8e\x4d\x44\x56\x36\x94\xe8\x0b\xac\xe4\x1e\xf3\x68\x8e\x36\x4c\x99\xf9\x76\xd4\x28\x85\xc2\x3c\xad\x46\x63\x76\x7c\xa5\xe4\xe2\x71\xb4\xc0\x3f\x1b\xd4\x46\x2f\x51\x98\x89\x38\x9b\xde\xee\xe6\xe7\x32\x83\x53\x5e\x71\x93\x12\x02\x63\x1e\xd6\x46\x13\x2b\xf6\x92\x76\xe0\xb9\x73\x8a\xf6\x08\x7e\x6d\x50\x1d\xfd\x11\x84\xba\xbb\xb0\x01\xad\x63\x9a\x49\xa4\xd4\x42\x8a\xa3\x92\x98\x7b\x32\x21\x15\x88\xa6\x2c\x81\x6f\x41\xc8\x90\x24\x74\xd6\x8d\xc8\xc3\x2a\x17\x8c\x45\xb7\xb6\xdb\xa9\xef\x3b\x91\xf5\x61\xf8\x9a\x91\xf6\xea\xc5\x04\x30\xa5\xd8\x91\xea\x45\x0c\x30\x9a\x19\xae\xb7\xc7\x1e\x8c\x79\x25\x59\xbf\xb7\x3f\xc7\xe3\x16\x63\xd1\xa0\xaa\xb8\xc0\xd8\x78\x4f\x62\x7c\xca\x0f\x60\xb2\x85\x4a\x2a\x82\x58\xe2\x48\x02\x3d\xb6\xd8\xc0\x27\xe3\x6b\x25\xf7\x3c\xc7\xfc\xa6\x45\x89\x03\x12\xc2\x68\x4b\x2b\x28\x0b\x4d\x81\xad\xc8\x2d\x57\xba\x5d\x6d\x7f\xb9\xa1\xef\x82\xe6\x31\x71\x04\xdd\x6c\x34\x9d\xac\x08\x93\xf4\x00\x3e\x1d\x21\xc7\x2d\x6b\x4a\x73\x13\x1c\x40\x40\x74\x12\x60\xb1\x81\x8a\x66\x5b\x7b\x22\x2e\x77\x6e\x34\x2d\x1b\xc2\x97\x16\xb2\xde\x7e\x85\x9f\xe1\xcb\xb7\x80\x59\xee\xa0\x23\xa4\x4a\x96\x23\xf8\xfb\xd7\xde\xad\x12\x20\x8a\x27\xb7\x81\x5f\x0d\x60\x4e\xc5\xa0\xf5\x65\xa8\x04\xcc\x64\x85\xa5\x68\x81\x87\x1d\x78\x59\x92\x8f\xb8\xcd\x21\x87\xc4\x1d\xa7\x9f\x4c\x06\x21\x23\xe7\x79\x1a\xa7\x1c\x80\xf7\x1b\xe8\x67\x05\x1b\x5d\x81\x70\x56\xf6\x9b\xb1\xb2\x9c\xf5\x85\x57\x4d\x15\x70\x37\x0a\x35\x79\x55\xd1\xb1\xd3\xd2\xce\xfb\xe9\x63\xbf\x42\x25\xa5\xad\xcd\x53\xf8\x19\x7e\xfa\x68\xc7\x3f\x04\xf5\xe2\xf0\x7f\xfb\xf5\xed\xc5\xcc\xcc\x1c\x3a\x38\x74\xed\x86\xb8\x1d\x1a\x3a\x78\xbd\x72\xdf\xfc\x7f\xda\x06\xf9\x10\x17\xd2\x19\x1e\xfe\xdd\x04\xf9\xd7\xbb\x9a\x46\xf4\x26\x80\xa4\x87\x59\x96\xbb\xae\x97\x86\xaa\x31\x2e\x4e\xc0\x55\x56\xd4\x9e\x7c\xf9\x44\x3c\xa0\x42\x0a\x62\xac\x09\xf5\x88\x70\x74\x3f\x53\xd5\x07\x85\x14\xa4\x81\x9c\xd9\x92\x97\x04\x09\x0b\x2f\xf9\xdb\xab\x8b\xac\x47\xb1\x18\xb3\x3a\xd2\x06\x90\x04\xb9\x41\x9a\x07\xb0\x03\x41\x9b\x57\xc7\xa5\x19\xee\x51\x98\xd3\x04\xac\xb8\xa1\x75\x7c\xeb\x8e\xa8\x40\xae\x6c\xc2\x36\x1a\x5c\x18\x9f\x25\x73\x90\x39\x84\x2f\x41\xa8\x55\xdf\x69\x7f\x8e\x10\xd7\xb4\x0f\xbe\xb8\xf1\xe8\x65\x53\xdf\x9e\x00\xb3\xf7\xad\x02\x8f\xdd\x89\x03\x58\xf8\x9f\x3a\x66\xd2\xc5\x7d\xe3\x2a\x98\x37\xb7\xab\x71\x58\x3e\x84\x2f\x61\xfd\x99\xc6\x81\x7d\xf4\x18\xd4\x73\x1a\xce\x8f\xce\x0e\xa6\x5b\x87\xc4\x66\x84\x06\x59\x4f\xa9\xef\x61\x15\x5d\x97\xfd\x56\x58\x86\x68\xb9\x8c\x8c\x9b\x6b\x5c\x83\xc0\xc3\x00\x96\x68\x6f\x6b\x46\x35\x48\x44\xc7\x14\x5c\xd3\x37\x77\xa3\xa2\xea\x6d\x38\x5d\xb4\x68\x98\x08\x2e\x08\x99\xdb\x66\xcb\x29\x38\xdb\x3d\xdd\x89\x8a\x1c\xb6\xac\xd4\x08\x92\x04\x1f\xb8\xc6\xae\xde\x5c\xcf\xf0\x30\x84\x4f\x52\x96\xc8\xc4\xc9\x5d\x3d\xde\xec\x71\x97\x2d\xfe\x3e\x9b\x5c\xd9\x87\x07\x76\xa4\xd8\x0b\x54\xcd\x84\x59\x99\x6c\xca\xdc\x9f\xa7\xbd\x7a\x37\xe6\xfc\x30\x63\x8a\xf6\xbd\x93\x39\x25\x5b\xcf\x29\x44\x1d\xed\xae\xff\x13\xa8\x58\x56\x70\x81\xb7\x0a\x59\xce\x36\x25\xa9\x92\x53\x89\xcd\x6d\xa5\x10\x3b\x38\x14\xc7\x98\x8d\xc6\xa2\x60\x45\x7e\x77\x0b\x34\xe4\xe8\xab\x9c\x71\x24\x21\x5c\xec\x36\x47\xa2\x65\x3b\xc5\x2a\x77\x35\x61\x75\x5d\xfa\x32\xe4\x06\x5c\x60\xe3\x1e\x95\xcf\x42\xcb\x5e\x65\x63\x60\xa3\x90\x3d\xdb\x5b\x32\xcb\x9e\x0f\x4c\xe5\xfa\xd6\x36\x29\x0c\xdf\xf0\x92\x9b\x63\xd7\x58\x52\x64\xd8\x3d\xa8\x91\xcc\xf1\xdc\xe2\xa2\xa9\x98\x38\xd9\xeb\x0b\xe0\x3f\x64\x72\x58\x53\xb1\xa3\x57\xd9\xc5\x8e\x80\x6d\x43\x60\x0b\x0a\x4b\x64\x1a\x9d\x7d\xbe\x45\x9c\xc9\x3d\x2a\xe7\x8f\x0b\xe6\xc0\xae\x61\x8a\x09\x83\xe7\x38\xe4\xe5\xf5\x35\xb2\x1d\xde\x10\x9f\xab\xa5\xd6\x3c\x9c\xa0\xee\xb0\xa4\x9e\xe0\x8d\x3a\x1f\xaf\x3c\x16\x5a\x3a\xab\xcf\xeb\xc5\xe3\x68\xbd\x48\x7f\x7d\x4a\x97\xab\xf5\x7d\x32\x99\xa6\x63\xfb\x69\x34\x9f\x2f\xc6\x93\x59\xb2\x9a\x2f\xbe\xf7\x79\x39\xbf\x5f\xad\x47\xc9\x6c\x94\x4e\xfb\x3e\xa7\xb3\xf1\xe3\x7c\x32\x5b\xad\x67\xf3\xd5\xfa\x7e\xfe\x34\x73\x53\xe6\x8b\x71\xba\x58\x7f\x4e\x96\xeb\xc9\xec\x6f\xc9\x74\x32\x5e\x3f\x24\x7f\x4d\x17\xeb\x64\xb9\x4c\x57\xeb\xe4\x61\xfe\x34\x5b\x5d\x98\xb8\xba\x36\x31\xfd\xfd\x71\xb2\x48\x63\x19\xf7\x4f\xd3\xe9\x1f\xeb\xfb\x49\xab\x9d\x1b\xee\x6a\xec\xc6\x9e\x66\xf7\x4f\xb3\x71\xfa\x23\x1a\x8e\x93\x55\x72\x75\xda\x7d\x9a\x7e\x7f\xea\xea\xc7\x76\x5c\xfd\xf8\x8e\xcb\xc9\x2f\xb3\x64\xf5\xb4\x48\xa3\xef\x0f\xc9\xef\xce\x2f\xc9\x6a\x32\x9f\xad\xd3\xdf\x47\x69\x1a\xac\x9c\xcc\x56\xe9\x62\x96\x4c\xd7\xe9\x62\x31\x77\x5d\x3c\x9a\xee\x16\x2e\x27\xff\x9d\x76\xa7\xbb\xf1\x64\xba\x48\x93\xf1\x1f\xeb\xe5\x6a\xbe\x48\xc7\xeb\x64\x36\x26\xd7\x4d\xa6\xd3\xe4\xd3\x34\x16\x7c\x3f\x5f\xac\x27\xb3\xd1\x7c\xb1\x48\x47\xab\xf5\xe8\x73\x32\x99\x79\xa1\x61\x2c\xfd\x7d\xf4\x39\x99\xfd\x92\xae\x93\xf1\x78\x11\x1a\x85\xcb\x74\x66\xa5\xb8\x21\x1b\x38\xc9\x74\x3a\xff\xcd\xeb\x40\xd6\x7f\x4a\x96\xa9\x3d\xd9\xf5\xfc\xde\x29\xbb\x6c\x91\xfc\xc1\x73\x9b\x33\xf8\x4e\xf2\x5c\xdb\x2b\xa5\x54\xee\x8e\x79\xba\x73\xb8\xd6\x49\x87\x18\x04\x1e\xf3\x5e\xfa\x9e\xc4\x97\xc0\x96\xdf\x7e\x7d\x7b\x03\x35\x17\x82\x8a\xb0\x2f\x23\xf0\xb3\xad\x60\x1f\x86\xaf\x08\xd0\xa9\xc0\xd8\xe1\x94\x08\xcb\x0f\x94\xe1\xed\xf6\x32\xd8\x7f\xa7\xe4\x26\x70\x70\xd7\xf7\xac\x64\x5a\xf3\xed\x31\x50\x11\xb4\x9b\x3a\x21\x27\xf4\xb3\x14\x0a\x0a\x96\x83\xa3\x29\xa1\xac\xfd\x21\x1b\xc8\x98\xf0\x44\x8a\x8b\x67\xda\x32\xe7\xdb\x2d\xda\x9b\x11\x8a\xdc\x32\x2b\x82\x40\x1d\x8d\xbf\x23\x5b\xf5\xbb\x96\x23\x79\x8a\xd6\x35\x04\x45\x4e\xf7\x27\xf4\xb6\xa4\xfe\xd7\xd7\x6c\x8b\x8a\xbf\x36\xac\xaa\xdb\x66\x5c\xb4\x69\xdf\x73\x0b\x4d\xdb\x48\xf9\xfc\x8c\x58\x93\xdd\x75\xa3\x6a\xa9\x03\xdc\x4e\xb6\xaf\x0c\x27\x6f\xef\x50\xa0\x62\x96\xe8\x6a\x60\xfe\x3a\xee\xb9\xb3\x35\x44\xdc\xda\xbb\x51\xa0\x9b\xef\x71\xb0\x1b\xdc\x80\x83\x94\x1b\xbb\x73\x40\x8e\x1b\x70\xb8\x92\x8e\x3f\xf8\x56\x03\x37\xf6\xe5\xc3\xd3\x9c\x57\xed\xc4\xd6\x40\x16\x9e\x6f\xba\x7c\xc6\x15\xa7\xdb\x3d\x2b\x79\xce\x6c\x81\x9a\x07\x5e\x13\xf4\x20\x9b\x93\xb1\x15\xbe\x5c\xcd\x1f\x1f\xd3\xf1\xfa\xb7\x64\x35\xfa\x3c\x99\xfd\xe2\x94\x88\xa4\x64\x52\x29\xd4\x75\xfb\x8e\x70\x20\x15\x6d\x70\xf4\x78\xc3\x07\x84\x46\x45\xa5\x5b\xf3\xfc\x8c\x4a\xb5\xdb\xf6\xbf\x5a\xb5\x5d\xcc\xf0\x5e\x64\x7b\xbe\x2c\x33\xc1\x8f\x2e\x12\x15\xdf\xed\x6c\xdd\x3c\x1d\x8d\x6b\x03\x74\xcc\x76\xa1\x5d\x96\x9d\xb5\xeb\x8a\x1d\xd7\x50\xb0\x3d\xb6\x19\xe3\x34\xa6\x68\xea\xd0\x34\xdb\xc5\x68\x2b\x26\xdd\x5e\x7c\x44\xd8\xd3\xd9\xb1\xc6\x95\xe5\xdc\xed\xcb\x0c\x50\x79\x37\x0e\x2e\xb6\x27\x07\xe9\xee\x1e\x8e\xd9\x74\xe4\x87\x8b\x87\x13\xfb\x9f\xae\x41\x8b\x37\xb0\x71\x4f\xcb\xca\x71\x0a\x56\x6a\xe9\xda\x56\x15\x7a\xba\x5a\x4b\xcd\x0d\xdf\x9f\x33\x83\xe0\x33\x0b\x1c\x04\x43\xa3\x78\xc0\xf3\xfd\xd3\x43\x5a\x48\xa5\x8b\x10\x43\x27\xac\x9b\x2c\x43\xad\xb7\x4d\x59\x1e\xa1\x75\xb1\xe3\x6e\x79\xee\x1e\x2d\xc9\x84\x96\x70\x0f\xa2\x0d\x2c\xd9\x39\xc0\x06\x2d\x91\x8a\x6e\x64\x4c\x04\xae\xa4\x03\x43\x74\x2c\xbe\x2c\x99\xa7\x3f\xd6\x5d\x3e\xaf\xb8\xe8\xb4\xdf\x2e\x62\x85\x8d\xec\x2b\xc6\xb8\xc7\x4d\x9b\x04\xcc\xbe\xd2\x73\x56\xfa\x27\xd2\x33\xb5\xb5\xe1\xae\x2b\x66\x1f\xcc\xa0\xa9\x83\x9d\xed\xd3\xea\xfd\x85\xc7\xb4\xae\x46\x11\x95\xb8\xa0\x92\x75\xac\x57\xcc\x12\x44\xa3\xa3\xf7\xdb\x4b\x4f\x76\xa4\xe3\xc7\x57\xae\x86\x52\x8a\x9d\x7d\x66\x75\xab\xce\x74\x39\x27\x37\xfd\x1a\x65\x4c\x64\x78\x52\xe7\xfb\xfb\x76\xd9\xd1\xeb\x4d\xd1\xf5\xc5\x7f\x74\xbb\x98\x95\xf5\x6b\x58\x2b\xdc\x73\xd9\xe8\xf2\x18\xf6\x76\x39\x93\xbb\x77\x38\xe6\xf1\x52\xe1\xad\x54\x3b\x0f\xaa\x27\xa9\x99\x14\x04\x4f\xa4\x51\xd0\xec\xbd\x2e\xec\x05\x8c\x80\x84\x29\xfc\xd0\x55\xe8\x69\x76\x5d\x25\xf7\xc2\x93\x51\x7a\x36\x62\xdb\x88\xfc\xaa\xad\xfe\x9e\xc4\x04\x14\xac\xae\x09\xf4\xe3\xb7\x79\xfa\x97\xea\x8a\x51\x4c\xe8\xad\xbb\x0c\xb7\x89\x62\x5b\x14\xac\x2c\xe5\x81\x8e\xe8\x5c\xc9\x88\x8e\xc6\x3a\xc6\x39\xd5\x41\x39\x52\x9b\x8b\x4c\xd1\xdd\x24\xef\x55\x8b\xc5\x9e\x3e\x3d\x5f\xd1\x8e\xbe\x06\xec\xd0\x46\xeb\x1e\x6d\xc3\xbb\xd7\xff\x37\x9e\x8e\xb8\x0d\xff\x49\x2b\x1d\x6f\x9c\x4c\x27\xab\x3f\x88\x2c\x2e\xd2\x64\x79\xf1\x58\xb8\x86\x5a\x1a\x14\x94\xe4\xe5\xd1\x67\xb4\x45\x30\x1b\x2c\xae\x58\xda\x07\x22\x0f\x08\x27\x62\xe2\x1b\x31\xb6\x66\xb6\xe0\x44\xec\x69\xc3\xb4\xbd\xde\x52\xd6\x82\x67\x19\x35\x06\x36\xa6\x69\x6d\xf7\xae\x58\x71\xbd\xc1\x82\xed\xb9\xd8\x7d\x88\xd3\xd5\xf7\x6f\x42\x74\x9c\x1a\x56\x6d\x63\x42\x48\xd8\x36\xca\x36\x44\x7c\x39\x71\xb4\x86\xeb\x78\x8b\x53\x23\x6b\x00\x13\xe1\x6a\x44\x46\x97\xcd\x9b\x48\x91\xca\x75\x1d\x14\xde\x3a\xc8\x76\xad\x72\x2b\xc9\x5d\x51\xbb\x4e\x3e\x27\x06\x71\x93\xb0\x5b\x96\x09\x43\x59\x85\x06\x95\x0e\x04\x8b\x6a\x27\x53\x1b\x6e\x14\x53\x47\x78\xc6\xe3\xad\x7b\x1f\xaf\x19\x57\x1a\xc8\x7f\x2d\x57\xb0\x4c\x37\xae\x98\x03\x12\x71\xb4\x5b\xa0\xa0\x8b\xab\x27\x59\xff\xb5\x9c\xcf\x40\x6e\xe8\x62\xda\x79\x1f\xef\x94\xb7\x47\x52\x45\xb7\x7f\x87\xd2\xf2\xb0\xae\xc6\x51\xfb\xb1\xb3\xfa\x3b\xed\x1b\x17\xd0\xae\x93\x79\x81\x01\x75\x7d\x68\x17\x7c\xbe\xfa\x47\x3a\xf1\xfe\x36\x11\x98\xfb\x6b\x83\x7f\x40\x8a\x79\xb9\x2e\x82\x8b\x1c\x5f\xfe\x69\x19\x13\xda\x25\x7a\xcd\xbc\x28\xc1\xed\x55\xca\x5d\x77\x87\x52\xee\x2e\x6e\xa1\x1a\x0c\xbc\x92\x6b\x77\x9d\xf1\xd4\x39\xee\x66\xb9\x2c\xed\xc2\xcb\xad\x42\xa9\x76\x03\xb8\xbf\xde\xc0\x6b\xdf\x80\xdb\x26\xde\xb9\x09\xcc\xf5\xd7\x83\x11\x6d\xbc\x58\xf9\x27\x82\x1b\x45\xe9\xd9\xe5\xef\x75\x77\x3e\xde\x3e\xfc\x41\x8d\x33\xca\x42\x0a\xbc\x4b\x17\xa3\x9f\x3e\xae\x3c\xfa\xd9\x00\x7c\x77\x56\x74\xdc\x9f\x56\x5c\xda\xf4\x94\x77\xed\x65\xc7\xe9\x76\xfe\x95\x72\xe9\x84\x6b\x34\x17\x59\x56\x78\x65\x48\x46\x57\xea\x69\xe5\xb0\x2f\xbb\x4e\x17\xd4\x65\xb3\xd1\x99\xe2\x75\xcf\xdd\xd9\x7f\xda\xb8\xc3\xb2\x38\x19\xf1\x35\x70\xe4\xd4\x25\xb9\x6f\xc1\x53\x00\xd8\x8e\x5f\xe0\xe3\x8d\x3d\x0d\xd6\x52\x46\xb7\x43\x6f\x57\x5e\xb6\x37\xe5\xf6\x5d\x31\x62\xbb\xff\x17\x00\x00\xff\xff\x44\xac\x83\x88\x78\x2c\x00\x00")

func schemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaGraphql,
		"schema/schema.graphql",
	)
}

func schemaSchemaGraphql() (*asset, error) {
	bytes, err := schemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.graphql", size: 11384, mode: os.FileMode(420), modTime: time.Unix(1594941968, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/schema.graphql": schemaSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"schema.graphql": &bintree{schemaSchemaGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
