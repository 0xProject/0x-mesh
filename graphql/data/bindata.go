// Code generated by go-bindata. (@generated) DO NOT EDIT.

 //Package data generated by go-bindata.// sources:
// schema/schema.graphql
package data

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x58\x49\x6f\xdb\xc8\x12\xbe\xfb\x57\x94\x33\x97\x04\xb0\x25\x63\xe6\x26\x20\x07\x45\x56\xde\x18\xe3\x25\x91\x94\x99\x83\x11\x18\x2d\x76\x51\xec\x67\xb2\x9b\xe9\x45\x32\x27\x98\xff\xfe\x50\xbd\x48\x24\x45\xe9\x61\x4e\x96\x7b\xab\xfd\xab\xaf\xf8\xee\xdd\xbb\x8b\x29\x18\xb1\x91\xc8\xe1\xe6\x0d\x94\xe6\xa8\x81\x95\x4a\x6e\x60\x27\x6c\x01\x46\x55\x08\x8c\x73\x61\x85\x92\xac\x84\x0a\x2d\xe3\xcc\x32\x60\x6b\xe5\x2c\xd8\x02\xe3\x9d\x5d\x21\xb2\x02\x84\x01\xa9\x2c\xd4\x4c\x5b\x50\xb9\xdf\xbe\x79\x83\x5a\x2b\xab\x32\x55\x82\xa9\x31\x13\xb9\xc8\x18\xbd\x36\xba\x20\xe9\xb6\xa9\x11\x9e\xe8\x89\xbf\x84\x2d\x1e\xd2\xf3\x3f\x2f\x00\x00\xb2\x82\x09\x79\xc7\x27\xb0\xb4\x5a\xc8\xcd\xa5\x5f\xc4\xb7\xac\x60\x72\x83\x53\xce\x35\x1a\xd3\xdd\xac\xd8\x2b\xea\x33\x3b\xc6\xa0\xbd\x65\x96\x9d\xda\x9b\x56\xca\x49\x3b\xb0\xfb\x19\xf1\xdc\xe5\xcf\x88\xdd\x55\x7b\x52\x11\x7b\x46\x11\x7b\x56\x11\x7b\x5e\x11\x3b\xa8\x88\x41\xc9\x4f\x68\x92\x23\x2e\x30\x13\xb5\x40\x69\x07\x0f\xe0\x5b\x2d\xb4\x0f\xd6\x4a\x54\xb8\xc4\x4c\x49\xde\x3b\x62\x58\xd9\xd3\x92\xb2\x89\x59\xa7\x7b\x7a\x50\xb0\xe9\xef\xaa\x40\x28\x98\x29\xae\x62\xca\x64\x4c\xc2\x1a\xc1\x19\xe4\x60\x15\x38\x29\x7e\x38\x2c\x1b\x10\x1c\xa5\x15\x79\x03\x4c\x86\x14\x1b\x75\x9e\xa1\x27\x4e\x0b\xd0\x58\x31\x21\x85\xdc\x00\xf3\x7e\x4c\xc9\xe8\x63\x05\x8c\xfc\x17\xc5\x17\x2c\xa4\x6c\x83\x16\xd6\x88\x12\x72\x51\x96\xc8\xbb\xc2\x68\x8d\xad\x4b\x5c\x9d\x0c\xcf\x3f\x17\x3e\x9b\xa7\x12\x50\xba\x0a\x32\x25\x6d\x52\xa0\x2c\x5b\x65\x92\x0b\x2c\xb9\x81\x5c\xa5\x8a\xc9\x45\x69\x51\x1b\x60\x92\x8f\x95\x06\xa3\xb4\xa5\x5b\xc2\x80\x71\x75\xad\xb4\x25\x5d\xe8\x69\xff\xae\x2f\x94\xcf\xf4\x46\xac\x10\x72\x43\xbb\x54\x86\x2a\xe4\xa8\x30\x06\xea\x61\xb0\x0c\x86\xb3\xbf\xb3\x7a\x94\xeb\x03\x29\x3e\x98\xd9\xc3\x09\xdd\x59\x3d\x4e\xdf\x53\x59\x7b\x3a\x59\xf7\x39\x7a\x36\x8e\x29\x7c\x94\x3a\xaf\x42\x72\x4a\x97\x4c\x55\x35\xd3\xc2\x28\x49\x69\x99\x32\x54\x48\x60\x31\x66\xad\xb0\x7c\xf6\x0b\x7f\xd0\xcd\x10\x96\xf9\xd7\x6f\xd3\x7b\xff\xeb\xf1\x69\xf5\x72\xf8\xef\x3f\x8b\xf9\x74\x35\x5f\xb4\x7f\xbf\x3c\x2d\x5a\x07\xee\xe7\xcb\xe5\xfe\xc7\x61\xab\xa5\x1f\x17\x1a\x33\xb2\x92\xd4\xa2\x74\x01\x21\x47\x30\x35\x19\x4a\x4e\x99\x53\x21\x93\x06\x4a\xb5\x43\x63\xe9\x48\x21\x36\x05\x1a\x3b\x82\x5b\xec\x9d\x89\x3b\x74\x28\x1c\x6f\x59\xb4\x54\xda\xde\xee\x25\x05\xa3\xa6\xcb\x99\xff\x7b\x3b\x5f\xce\xda\x1a\x6d\x59\xe9\x90\x5e\x09\x7e\xf1\x8d\x63\x04\x0f\xce\x50\x45\xf9\xdc\x37\xac\x42\xf0\x48\xcf\x8c\x5f\xf0\x65\x00\x8d\x72\xc0\x34\xc6\x7b\xa4\xd8\xba\x09\x3a\x98\x8c\x95\x4c\x47\xbf\xfe\x49\xef\xc7\xfa\x4a\x32\x54\x04\x05\x33\x82\x59\x0b\x40\x84\x84\x1f\x0e\xb5\x40\x43\xfa\x28\x59\x36\xa0\xd1\x3a\x9d\x4e\x83\x2d\x98\x85\x0a\xd1\x42\x86\x9a\x4a\x14\x32\x2d\x48\x38\x0b\x82\x85\xac\x9d\x4d\x65\xe6\x25\xfd\x8c\x99\x83\x25\x9f\xb4\xea\x2f\x60\x0e\x25\xcb\xa4\x15\xfe\xb0\xea\x1d\x32\x69\x6b\x7f\x00\x88\x10\x32\xaf\x0d\x19\x4c\x40\xf0\xff\x0d\x21\x38\xd1\xaa\x8d\x23\x42\x46\xfc\xd0\x68\x5c\x69\x8d\xf7\x63\x30\x35\x01\x46\xcb\x14\x8a\xe6\x79\x43\xf6\x59\x35\xe9\x86\xfe\xb2\x1d\xe8\x75\xa9\xb2\x57\x90\xae\x5a\x13\x88\x4a\x1e\x17\x08\x83\xbc\x21\xa4\x5e\xc9\x2c\xe5\x54\xd8\xf1\xde\x26\x84\xf5\xc8\x5a\x6b\x95\xa1\x21\xeb\xd6\x0d\x3c\xa0\x29\x5a\x0c\xe0\xde\x5f\xfb\xe4\x6f\x05\x45\x83\x98\x2e\xc4\x77\x41\x3f\x6a\x36\x0b\x58\x6b\xc8\x4b\xb9\xd8\xb8\x80\x01\xa0\x6a\xfa\xe3\x81\x15\xb6\x4c\x0b\xe5\x0c\x18\xcb\x6c\x00\xdf\x9e\xf8\xa5\xdf\x08\x82\xb7\xa8\x4d\x70\x44\x4b\x72\xed\xd6\x4b\xb7\x5e\xa9\x5a\x64\xdd\x0d\x4d\xf8\xf4\xf7\x56\xb9\x5e\x5f\xac\x11\xf5\xdd\x6d\xaf\x9d\xda\x02\x35\xba\x6a\xe6\xb1\xfa\x76\x02\x77\xd2\x86\x9d\xf2\x60\xfe\xa4\xed\x8b\xcb\xe4\x8a\x2f\x88\xda\xb4\x2e\x48\x57\xf9\x10\x0e\xae\xdd\xc9\xac\x74\x54\xe8\x0b\xac\xd4\x16\x79\xeb\x8c\xb1\x4c\xdb\xa7\x7c\xe6\xb4\x46\x69\xbf\xad\x66\xb7\xac\x39\x52\x72\xf1\x65\xb6\xc0\x1f\x0e\x8d\x35\x4b\x94\xf6\x4e\xf6\x8e\xef\x5f\x8b\x67\x99\xc5\x7b\x51\x09\x3b\x27\x04\x46\x9e\xee\xb6\x0e\x56\xec\x6d\xde\x81\xe7\x4e\x14\x7d\x08\xbe\x3a\xd4\x4d\x0c\x41\xea\xbb\x0b\x9f\xd0\xa6\x4d\x33\x89\x94\x7a\x48\x09\x54\x12\x79\x24\x13\x4a\x83\x74\x65\x09\x22\x07\xa9\x52\x91\x50\xac\x9d\xe4\xe9\x56\x48\xc6\xa2\xdb\xdb\xfd\xd1\xf7\x9d\xcc\xfa\x30\x39\x66\xa4\x83\x7a\x31\x09\x4c\x6b\xd6\x50\xbf\x68\x03\x8c\x61\x56\x98\xbc\x19\xc0\x98\x23\xc9\xe6\xbd\xff\xdd\x5e\xf7\x18\x8b\x16\x75\x25\x24\xb6\x8d\x8f\x24\x26\x96\xfc\x08\xee\x72\xa8\x94\x26\x88\x25\x8e\x24\x31\x62\x8b\x4f\x7c\x32\xbe\xd6\x6a\x2b\x38\xf2\xab\x3d\x4a\xec\x90\x10\xc6\x78\x5a\x41\x55\x68\x0b\xdc\x8b\xcc\x85\x36\xfb\xdb\xfe\x9f\x2b\xda\x97\x74\x8e\xc9\x06\x8c\x5b\x1b\x8a\xac\x4c\x87\xcc\x08\x3e\x35\xc0\x31\x67\xae\xb4\x57\xc9\x01\x04\x44\x07\x01\x1e\x1b\xa8\x69\xee\x7b\x4f\x8b\xcb\xf5\x8d\xa6\x6b\x13\x78\xde\x43\xd6\xe5\x77\xf8\x08\xcf\x3f\x13\x66\x85\x40\xb7\x90\x6a\xba\x9c\xc1\x3f\xdf\x07\x9f\x9a\x02\x51\x3c\x95\x27\x7e\x35\x82\x27\x6a\x06\x7b\x5f\xa6\x4e\xc0\x6c\x56\x78\x8a\x96\x78\xd8\x4e\x94\x25\xf9\x48\xf8\x1a\x0a\x48\xdc\x71\xfa\xc1\x64\x90\xaa\xe5\xbc\x48\xe3\x74\x00\xf0\x61\x03\xe3\xa9\x64\x63\x68\x10\xc1\xca\x61\x33\x56\x9e\xb3\xbe\x89\xca\x55\x09\x77\x5b\xa9\xa6\xce\x2a\x7a\x1b\xb4\xf4\xe7\x7e\xbd\x19\x56\xa8\xa4\xb2\xf5\x75\x0a\x1f\xe1\xd7\x1b\xbf\xfe\x21\xa9\xd7\x4e\xff\xcb\xef\x97\x27\x2b\x33\x0b\xe8\x10\xd0\xb5\x9b\xe2\x7e\x69\x12\xe0\xb5\xd5\x02\xfb\xf3\x66\x96\x29\xed\x93\xc3\x2a\xff\xe2\xf3\xf0\xc4\xf8\xfd\x7d\x61\x6d\x6d\x26\xe3\xf1\x46\xd8\xc2\xad\x47\x99\xaa\xc6\x37\x6f\x5f\xb4\xfa\x2f\x66\x76\x7c\xf3\x76\x9d\xee\x5d\x77\xee\x8d\xd7\xa5\x5a\x8f\x2b\x66\x2c\xea\xf1\xf6\xb7\xf1\xf6\xb7\xee\xfe\xa8\xe2\xbf\x78\x4d\xae\x2b\x34\x86\x6d\xf0\x3a\x57\xba\x62\xf6\x43\xbb\x91\x3e\xe2\xce\x7b\xa5\x3f\x9a\x1e\xc0\xb0\x3f\x97\xc6\x1f\x43\x83\xe9\xc0\xd6\x61\xa6\xfb\xd4\x58\x3c\xda\x4a\x03\xc7\x27\xb1\x79\xf4\x89\x70\x72\x36\xed\x5f\xf7\x13\x61\xef\x9a\x3d\xad\x4d\x7f\x3c\x6d\x3d\x77\x3c\x9d\x0e\x3d\x7b\x52\x1b\x7b\x4a\x9b\xde\x88\xda\x51\x67\x70\x46\xed\x9c\x38\x31\xa4\xf6\x65\xf8\x39\xb5\xbf\x78\x18\x55\xa3\x9e\x2d\xb6\x93\x30\x33\xa2\x2e\xe3\x3c\x74\x57\xa8\x9c\x0d\x69\x03\xa1\xd1\xa2\x89\x5c\x2c\xd6\xe5\x0e\x35\x52\x4e\x63\x4d\x20\x48\xfc\xa3\xbb\x4d\x24\x00\x34\x52\xce\x26\xae\xe6\x3b\xe0\x34\x49\x58\x44\xc9\x3f\x8f\xe6\xda\x08\x6a\x6d\x08\xeb\x48\x1b\xc1\x34\xc9\x4d\xd2\x22\x9e\xed\x08\xe9\xa2\x3a\xa1\xea\x70\x8b\xd2\x1e\x0e\x60\x25\x2c\xdd\x13\x79\x08\x56\x81\x42\xfb\xfa\x75\x06\x42\x62\xf7\x6a\x3b\xc9\x9c\xc0\x73\x12\xea\xd5\x0f\xda\xf7\x01\xe3\x9c\xf6\xc9\x17\x57\x11\xcc\x3c\x12\xf8\x08\x30\x3f\x7e\x15\xd8\x74\x0f\x8e\x60\x11\x7f\x75\xcc\xa4\x39\x7e\x1d\x1a\x5a\x34\xb7\xab\x71\xba\x3e\x81\xe7\x74\xbf\xa7\x71\x22\x23\x03\x06\x0d\x44\x23\xf8\x31\xd8\xc1\xcc\xde\x21\x6d\x33\xd2\xf7\xb2\x81\xce\x3f\x40\x32\xba\x2e\xfb\xab\xf0\x84\xd1\x53\x1b\xd5\xfe\xd6\x26\x0c\x48\xdc\x8d\x60\x89\x7e\x78\xb3\xda\x21\xf1\x1e\x5b\x08\x43\x7b\x61\xc0\xa2\x66\x6e\x05\xcd\x5d\xb4\x4c\x7c\x17\xa4\xe2\xfe\xdb\xcb\x21\x39\xf7\x6f\x86\x88\x4a\x0e\x39\x2b\x0d\x82\x22\xc1\x3b\x61\xb0\xab\xb7\x30\x8f\xb8\x9b\xc0\x27\xa5\x4a\x64\xf2\xe0\xae\x01\x6f\x0e\xb8\xcb\x73\x81\x58\x4d\x81\x05\xc0\x03\x6b\x28\xf7\x12\x73\xb3\xe9\x54\xa6\x5c\xc9\x63\x3c\xfd\x24\xee\x6c\x3f\x98\x81\xb1\xfd\x9e\xbe\x7f\x9c\x89\xcb\xa1\xd4\x4e\xc5\xa0\xeb\xf7\x29\x54\x2c\x2b\x84\xc4\x6b\x8d\x8c\xb3\x75\x49\x2a\x70\xea\xb4\xdc\x37\x0c\xb9\x81\x5d\xd1\xb4\x49\x69\x5b\x08\xac\xc8\xdf\xe1\x82\x01\x8e\xb1\xd9\xd9\xc0\x15\xd2\x7c\xb7\x6e\x88\x9d\x6d\x34\xab\xc2\x84\xc2\xea\xba\x8c\xdd\x28\x2c\x84\x84\xc6\x2d\xea\x58\x7d\x9e\xc4\x2a\x67\x61\xad\x91\xbd\xfa\x61\x99\x65\xaf\x3b\xa6\xb9\xb9\xf6\xdf\x2a\xac\x58\x8b\x52\xd8\xa6\x6b\x26\x29\x32\xe9\x06\x68\xa6\x38\xf6\x2d\x2e\x5c\xc5\xe4\xc1\xde\xd8\x07\xff\x95\xc9\xe9\x4e\xc5\x9a\xa8\x72\xc8\x19\x09\xb9\x23\x8c\x05\x8d\x25\x32\x83\xc1\xbe\xf8\xa5\x38\x53\x5b\xd4\xc1\x1f\x27\xcc\x81\x8d\x63\x9a\x49\x8b\x7d\xfc\x89\xf2\x8e\xbf\xc1\x25\x9c\x21\x5a\x57\x2b\x63\x44\x8a\xa0\xe9\x90\xa5\x81\xa4\x1d\xc1\xa3\xb2\x18\xa9\x21\x31\xeb\x70\x2b\x41\x24\xe3\x1c\xf9\x45\xe4\x28\xb9\x90\x2c\xf0\x13\x2a\xc4\xf0\x9d\xe3\x39\x51\x21\x5f\x6e\x5c\x65\xa6\x45\x59\x14\x57\xd9\x48\xe9\xcd\x49\xf2\x52\xa1\x29\xc6\x7f\xa3\x56\xf8\x36\xf6\x5e\xde\xb2\x52\x70\x66\x95\xfe\xa5\x7e\xdd\x5c\xd3\x10\x4b\xc1\x31\x1f\x2e\x68\x82\x65\x50\x0a\xb3\xb7\x33\x28\x1a\xc5\x97\x0d\xd9\xe7\xa8\x7a\xf7\x1f\x74\x8e\x32\x20\x7d\xa9\x5a\xfd\xfe\xb2\xf8\x32\x7b\x59\xcc\xbf\x7e\x9b\x2f\x57\x2f\x9f\xa7\x77\xf7\xf3\x5b\xbf\x75\xf7\xf8\xe7\xf4\xfe\xee\xf6\xe5\x61\xfa\xc7\x7c\xf1\x32\x5d\x2e\xe7\xab\x97\xe9\xc3\xd3\xb7\xc7\x55\x67\x7b\x75\xbc\x9d\x70\xe1\x21\x76\xca\x1e\x18\x4c\x39\x37\x7e\x5e\x51\x3a\xb8\xf9\x40\x68\xc3\x5c\xde\x69\x33\xa9\x2b\xbe\x57\x71\xe0\x7d\x4e\x54\xec\xf2\xfb\xe5\x15\xd4\x42\x4a\x82\xf4\x08\x4a\xf0\xd1\xe3\xe1\x87\xc9\x51\x3b\xa5\x04\xf9\x5f\x00\x00\x00\xff\xff\xb8\xab\x81\xf0\xf0\x18\x00\x00")

func schemaSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaSchemaGraphql,
		"schema/schema.graphql",
	)
}

func schemaSchemaGraphql() (*asset, error) {
	bytes, err := schemaSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema/schema.graphql", size: 6384, mode: os.FileMode(420), modTime: time.Unix(1594938402, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema/schema.graphql": schemaSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema": &bintree{nil, map[string]*bintree{
		"schema.graphql": &bintree{schemaSchemaGraphql, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
